/*
    Block library for GrAF: mathematical functions
    Copyright (C) 2012  Christian Mayer - GrAF (at) ChristianMayer (dot) de

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

{
  "MainLib": {
    "memory": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [      
        { 
          "name": "in1",
          "type": "continuous"
        }
      ],
      "outPorts": [
        { 
          "name": "out1",
          "type": "state"
        }
      ],
      "parameters": {
        "initial_value" : { 
          "type": "float",
          "default": 0.0
        }
      },
      "init":"
        move<float>( out1, initial_value )
      ",
      "implementation":"
        //var int inner
        //var float outer
        move<float>( out1, in1 )
      "
    },
    "scope": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in1",
          "type": "continuous"
        }
      ],
      "outPorts": [],
      "parameters":{}
    },
    "integral": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in1",
          "type": "continuous"
        }
      ],
      "outPorts": [
        { 
          "name": "out1",
          "type": "state"
        }
      ],
      "parameters":{},
      "implementation":"
        //var int inner
        //var float outer
        muladd<float>( out1, in1, __dt )
        //move<float>( inner, out1 )
      "
      
    },
    "display": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in1",
          "type": "continuous"
        }
      ],
      "outPorts": [],
      "parameters":{}
    },
    "const": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [],
      "outPorts": [
        { 
          "name": "out1",
          "type": "continuous"
        }
      ],
      "parameters": {
        "value" : { 
          "type": "float",
          "default": 1.0
        }
      },
      "init":"
      move<float>( out1, value )
      "
    },
    "sum": {
      "width": 100,
      "height": 50,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in1",
          "type": "continuous"
        },
        { 
          "name": "in2",
          "type": "continuous"
        }
      ],
      "outPorts": [
        { 
          "name": "out1",
          "type": "continuous"
        }
      ],
      "parameters":{},
      "implementation":"
      sum<float>( out1, in1, in2 )
      "
    },
    "gain": {
      "width": 75,
      "height": 75,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      /*
      "mask": [
      { "type": "move", "x": 0.999, "y": 0.5   }, // it must allways start with a move!
      { "type": "line", "x": 0    , "y": 0.999 },
      { "type": "line", "x": 0    , "y": 0     },
      { "type": "close" },
      { "type": "new", "fill": "none" },
      { "type": "text", "x": 0.4, "y": 0.55, "text": "$gain", "styling":["middle"] }
      ],
      "maskOptions": {
        "showLabel": false
      },*/
      "inPorts": [
        { 
          "name": "in",
          "type": "continuous"
        }
      ],
      "outPorts": [
        { 
          "name": "out",
          "type": "continuous"
        }
      ],
      "parameters": {
        "gain" : { 
          "type": "float",
          "default": 1.0
        }
      },
      "implementation":"
      mul<float>( out, gain, in )
      "
    },
    "zeroDetect": {
      "width": 75,
      "height": 75,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in",
          "type": "continuous"
        }
      ],
      "outPorts": [
        { 
          "name": "out",
          "type": "event"
        }
      ],
      "parameters": {
      },
      "implementation":"
        var float old
        var bool rel
        mul<float>( old, old, in )
        rel<bool, float>( rel, old, ground, \"LESSEQUAL\" )
        jumptrue<bool>( 2, rel )
        send<float>( in, \"foo:zeroDetect\" )
        move<float>( old, in ) 
      "
    },
    "sendMessage": {
      "width": 75,
      "height": 75,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
        { 
          "name": "in",
          "type": "event"
        }
      ],
      "outPorts": [
      ],
      "parameters": {
      },
      "implementation":"
        send<float>( in, \"foo:bar\" )
      "
    },
    "getMessage": {
      "width": 75,
      "height": 75,
      "rotation": 0,
      "flip": false,
      "color": [0.0, 0.0, 0.0],
      "background": [1.0, 1.0, 1.0],
      "inPorts": [
      ],
      "outPorts": [
        { 
          "name": "out",
          "type": "event"
        }
      ],
      "parameters": {
        "address" : { 
          "type": "string",
          "default": "foo:bar"
        }
      },
      "implementation":"
        get<float>( out, address )
      "
    }
  }
}
